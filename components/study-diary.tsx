"use client"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Badge } from "@/components/ui/badge"
import { Plus, Search, Calendar, BookOpen } from "lucide-react"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { useLanguage } from "@/hooks/use-language"

interface DiaryEntry {
  id: string
  title: string
  content: string
  date: string
  mood: "excellent" | "good" | "okay" | "bad"
  tags: string[]
  studyHours: number
  achievements: string[]
}

export function StudyDiary() {
  const { t } = useLanguage()
  const [entries, setEntries] = useState<DiaryEntry[]>([
    {
      id: "1",
      title: "Ng√†y h·ªçc React Hooks hi·ªáu qu·∫£",
      content:
        "H√¥m nay m√¨nh ƒë√£ h·ªçc ƒë∆∞·ª£c r·∫•t nhi·ªÅu v·ªÅ React Hooks, ƒë·∫∑c bi·ªát l√† useEffect v√† useState. C·∫£m th·∫•y t·ª± tin h∆°n khi x·ª≠ l√Ω state management. ƒê√£ l√†m ƒë∆∞·ª£c 3 b√†i t·∫≠p th·ª±c h√†nh v√† hi·ªÉu r√µ lifecycle c·ªßa component.",
      date: "2024-01-08",
      mood: "excellent",
      tags: ["React", "Hooks", "Frontend"],
      studyHours: 6,
      achievements: ["Ho√†n th√†nh 3 b√†i t·∫≠p", "Hi·ªÉu r√µ useEffect"],
    },
    {
      id: "2",
      title: "Kh√≥ khƒÉn v·ªõi Database Design",
      content:
        "Ng√†y h√¥m nay g·∫∑p kh√≥ khƒÉn v·ªõi vi·ªác thi·∫øt k·∫ø database. Normalization kh√° ph·ª©c t·∫°p, c·∫ßn √¥n l·∫°i l√Ω thuy·∫øt. Tuy nhi√™n ƒë√£ hi·ªÉu ƒë∆∞·ª£c c∆° b·∫£n v·ªÅ 1NF, 2NF. Ng√†y mai s·∫Ω ti·∫øp t·ª•c v·ªõi 3NF.",
      date: "2024-01-07",
      mood: "okay",
      tags: ["Database", "SQL", "Theory"],
      studyHours: 4,
      achievements: ["Hi·ªÉu 1NF v√† 2NF"],
    },
    {
      id: "3",
      title: "Breakthrough v·ªõi Algorithm",
      content:
        "Cu·ªëi c√πng c≈©ng gi·∫£i ƒë∆∞·ª£c b√†i Dynamic Programming kh√≥! C·∫£m gi√°c th·∫≠t tuy·ªát khi code ch·∫°y ƒë√∫ng. H√¥m nay h·ªçc ƒë∆∞·ª£c pattern Tabulation v√† Memoization. S·∫Ω luy·ªán th√™m c√°c b√†i t∆∞∆°ng t·ª±.",
      date: "2024-01-06",
      mood: "excellent",
      tags: ["Algorithm", "DP", "Problem Solving"],
      studyHours: 5,
      achievements: ["Gi·∫£i ƒë∆∞·ª£c b√†i DP kh√≥", "Hi·ªÉu Tabulation"],
    },
  ])

  const [newEntry, setNewEntry] = useState({
    title: "",
    content: "",
    date: new Date().toISOString().split("T")[0],
    mood: "good" as const,
    tags: "",
    studyHours: 0,
    achievements: "",
  })

  const [isDialogOpen, setIsDialogOpen] = useState(false)
  const [searchTerm, setSearchTerm] = useState("")
  const [filterYear, setFilterYear] = useState("all")
  const [filterMonth, setFilterMonth] = useState("all")
  const [filterMood, setFilterMood] = useState("all")

  const addEntry = () => {
    if (newEntry.title && newEntry.content) {
      const entry: DiaryEntry = {
        id: Date.now().toString(),
        title: newEntry.title,
        content: newEntry.content,
        date: newEntry.date,
        mood: newEntry.mood,
        tags: newEntry.tags
          .split(",")
          .map((tag) => tag.trim())
          .filter(Boolean),
        studyHours: newEntry.studyHours,
        achievements: newEntry.achievements
          .split(",")
          .map((achievement) => achievement.trim())
          .filter(Boolean),
      }
      setEntries([entry, ...entries])
      setNewEntry({
        title: "",
        content: "",
        date: new Date().toISOString().split("T")[0],
        mood: "good",
        tags: "",
        studyHours: 0,
        achievements: "",
      })
      setIsDialogOpen(false)
    }
  }

  const getMoodEmoji = (mood: string) => {
    switch (mood) {
      case "excellent":
        return "üòÑ"
      case "good":
        return "üòä"
      case "okay":
        return "üòê"
      case "bad":
        return "üòû"
      default:
        return "üòä"
    }
  }

  const getMoodText = (mood: string) => {
    switch (mood) {
      case "excellent":
        return "Xu·∫•t s·∫Øc"
      case "good":
        return "T·ªët"
      case "okay":
        return "B√¨nh th∆∞·ªùng"
      case "bad":
        return "Kh√¥ng t·ªët"
      default:
        return "T·ªët"
    }
  }

  const getMoodColor = (mood: string) => {
    switch (mood) {
      case "excellent":
        return "bg-green-100 text-green-800 border-green-200"
      case "good":
        return "bg-blue-100 text-blue-800 border-blue-200"
      case "okay":
        return "bg-yellow-100 text-yellow-800 border-yellow-200"
      case "bad":
        return "bg-red-100 text-red-800 border-red-200"
      default:
        return "bg-blue-100 text-blue-800 border-blue-200"
    }
  }

  const filteredEntries = entries.filter((entry) => {
    const matchesSearch =
      entry.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      entry.content.toLowerCase().includes(searchTerm.toLowerCase()) ||
      entry.tags.some((tag) => tag.toLowerCase().includes(searchTerm.toLowerCase()))

    const entryDate = new Date(entry.date)
    const matchesYear = filterYear === "all" || entryDate.getFullYear().toString() === filterYear
    const matchesMonth = filterMonth === "all" || (entryDate.getMonth() + 1).toString() === filterMonth
    const matchesMood = filterMood === "all" || entry.mood === filterMood

    return matchesSearch && matchesYear && matchesMonth && matchesMood
  })

  const years = [...new Set(entries.map((entry) => new Date(entry.date).getFullYear().toString()))]
  const months = [
    { value: "1", label: "Th√°ng 1" },
    { value: "2", label: "Th√°ng 2" },
    { value: "3", label: "Th√°ng 3" },
    { value: "4", label: "Th√°ng 4" },
    { value: "5", label: "Th√°ng 5" },
    { value: "6", label: "Th√°ng 6" },
    { value: "7", label: "Th√°ng 7" },
    { value: "8", label: "Th√°ng 8" },
    { value: "9", label: "Th√°ng 9" },
    { value: "10", label: "Th√°ng 10" },
    { value: "11", label: "Th√°ng 11" },
    { value: "12", label: "Th√°ng 12" },
  ]

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">üìî Nh·∫≠t k√Ω h·ªçc t·∫≠p</h1>
          <p className="text-muted-foreground">Ghi l·∫°i h√†nh tr√¨nh h·ªçc t·∫≠p v√† c·∫£m x√∫c m·ªói ng√†y</p>
        </div>

        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
          <DialogTrigger asChild>
            <Button>
              <Plus className="w-4 h-4 mr-2" />
              Vi·∫øt nh·∫≠t k√Ω
            </Button>
          </DialogTrigger>
          <DialogContent className="max-w-2xl">
            <DialogHeader>
              <DialogTitle>Vi·∫øt nh·∫≠t k√Ω h·ªçc t·∫≠p</DialogTitle>
              <DialogDescription>Ghi l·∫°i nh·ªØng g√¨ b·∫°n ƒë√£ h·ªçc v√† c·∫£m nh·∫≠n h√¥m nay</DialogDescription>
            </DialogHeader>
            <div className="grid gap-4 py-4">
              <div className="grid gap-2">
                <Label htmlFor="diary-title">Ti√™u ƒë·ªÅ</Label>
                <Input
                  id="diary-title"
                  value={newEntry.title}
                  onChange={(e) => setNewEntry({ ...newEntry, title: e.target.value })}
                  placeholder="Ti√™u ƒë·ªÅ cho ng√†y h√¥m nay..."
                />
              </div>
              <div className="grid gap-2">
                <Label htmlFor="diary-content">N·ªôi dung</Label>
                <Textarea
                  id="diary-content"
                  value={newEntry.content}
                  onChange={(e) => setNewEntry({ ...newEntry, content: e.target.value })}
                  placeholder="Chia s·∫ª nh·ªØng g√¨ b·∫°n ƒë√£ h·ªçc, kh√≥ khƒÉn g·∫∑p ph·∫£i, v√† c·∫£m x√∫c c·ªßa b·∫°n..."
                  rows={6}
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="grid gap-2">
                  <Label htmlFor="diary-date">Ng√†y</Label>
                  <Input
                    id="diary-date"
                    type="date"
                    value={newEntry.date}
                    onChange={(e) => setNewEntry({ ...newEntry, date: e.target.value })}
                  />
                </div>
                <div className="grid gap-2">
                  <Label htmlFor="diary-mood">T√¢m tr·∫°ng</Label>
                  <Select
                    value={newEntry.mood}
                    onValueChange={(value: any) => setNewEntry({ ...newEntry, mood: value })}
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="excellent">üòÑ Xu·∫•t s·∫Øc</SelectItem>
                      <SelectItem value="good">üòä T·ªët</SelectItem>
                      <SelectItem value="okay">üòê B√¨nh th∆∞·ªùng</SelectItem>
                      <SelectItem value="bad">üòû Kh√¥ng t·ªët</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="grid gap-2">
                  <Label htmlFor="diary-hours">S·ªë gi·ªù h·ªçc</Label>
                  <Input
                    id="diary-hours"
                    type="number"
                    min="0"
                    max="24"
                    value={newEntry.studyHours}
                    onChange={(e) => setNewEntry({ ...newEntry, studyHours: Number(e.target.value) })}
                  />
                </div>
                <div className="grid gap-2">
                  <Label htmlFor="diary-tags">Tags (ph√¢n c√°ch b·∫±ng d·∫•u ph·∫©y)</Label>
                  <Input
                    id="diary-tags"
                    value={newEntry.tags}
                    onChange={(e) => setNewEntry({ ...newEntry, tags: e.target.value })}
                    placeholder="React, Database, Algorithm..."
                  />
                </div>
              </div>
              <div className="grid gap-2">
                <Label htmlFor="diary-achievements">Th√†nh t√≠ch h√¥m nay (ph√¢n c√°ch b·∫±ng d·∫•u ph·∫©y)</Label>
                <Input
                  id="diary-achievements"
                  value={newEntry.achievements}
                  onChange={(e) => setNewEntry({ ...newEntry, achievements: e.target.value })}
                  placeholder="Ho√†n th√†nh b√†i t·∫≠p, Hi·ªÉu kh√°i ni·ªám m·ªõi..."
                />
              </div>
            </div>
            <DialogFooter>
              <Button onClick={addEntry}>L∆∞u nh·∫≠t k√Ω</Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      </div>

      {/* Search and Filters */}
      <div className="flex flex-col sm:flex-row gap-4">
        <div className="relative flex-1">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4" />
          <Input
            placeholder="T√¨m ki·∫øm nh·∫≠t k√Ω..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="pl-10"
          />
        </div>

        <div className="flex gap-2">
          <Select value={filterYear} onValueChange={setFilterYear}>
            <SelectTrigger className="w-[120px]">
              <SelectValue placeholder="NƒÉm" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">T·∫•t c·∫£ nƒÉm</SelectItem>
              {years.map((year) => (
                <SelectItem key={year} value={year}>
                  {year}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>

          <Select value={filterMonth} onValueChange={setFilterMonth}>
            <SelectTrigger className="w-[120px]">
              <SelectValue placeholder="Th√°ng" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">T·∫•t c·∫£ th√°ng</SelectItem>
              {months.map((month) => (
                <SelectItem key={month.value} value={month.value}>
                  {month.label}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>

          <Select value={filterMood} onValueChange={setFilterMood}>
            <SelectTrigger className="w-[140px]">
              <SelectValue placeholder="T√¢m tr·∫°ng" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">T·∫•t c·∫£</SelectItem>
              <SelectItem value="excellent">üòÑ Xu·∫•t s·∫Øc</SelectItem>
              <SelectItem value="good">üòä T·ªët</SelectItem>
              <SelectItem value="okay">üòê B√¨nh th∆∞·ªùng</SelectItem>
              <SelectItem value="bad">üòû Kh√¥ng t·ªët</SelectItem>
            </SelectContent>
          </Select>
        </div>
      </div>

      {/* Diary Entries Grid */}
      <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
        {filteredEntries.map((entry) => (
          <Card key={entry.id} className="hover:shadow-lg transition-shadow duration-200">
            <CardHeader className="pb-3">
              <div className="flex items-start justify-between">
                <div className="flex-1">
                  <CardTitle className="text-lg line-clamp-2">{entry.title}</CardTitle>
                  <CardDescription className="flex items-center gap-2 mt-2">
                    <Calendar className="w-4 h-4" />
                    {new Date(entry.date).toLocaleDateString("vi-VN", {
                      weekday: "long",
                      year: "numeric",
                      month: "long",
                      day: "numeric",
                    })}
                  </CardDescription>
                </div>
                <div className={`px-2 py-1 rounded-full text-sm font-medium border ${getMoodColor(entry.mood)}`}>
                  {getMoodEmoji(entry.mood)} {getMoodText(entry.mood)}
                </div>
              </div>
            </CardHeader>
            <CardContent className="space-y-4">
              <p className="text-sm text-muted-foreground line-clamp-4">{entry.content}</p>

              <div className="flex items-center gap-4 text-sm">
                <div className="flex items-center gap-1">
                  <BookOpen className="w-4 h-4 text-blue-500" />
                  <span className="font-medium">{entry.studyHours}h</span>
                </div>
              </div>

              {entry.tags.length > 0 && (
                <div className="flex flex-wrap gap-1">
                  {entry.tags.map((tag, index) => (
                    <Badge key={index} variant="outline" className="text-xs">
                      {tag}
                    </Badge>
                  ))}
                </div>
              )}

              {entry.achievements.length > 0 && (
                <div className="space-y-2">
                  <h4 className="text-sm font-medium text-green-600">üéâ Th√†nh t√≠ch:</h4>
                  <ul className="text-sm space-y-1">
                    {entry.achievements.map((achievement, index) => (
                      <li key={index} className="flex items-center gap-2">
                        <div className="w-1.5 h-1.5 bg-green-500 rounded-full"></div>
                        {achievement}
                      </li>
                    ))}
                  </ul>
                </div>
              )}
            </CardContent>
          </Card>
        ))}
      </div>

      {filteredEntries.length === 0 && (
        <Card>
          <CardContent className="text-center py-12">
            <BookOpen className="w-12 h-12 text-muted-foreground mx-auto mb-4" />
            <h3 className="text-lg font-medium mb-2">Ch∆∞a c√≥ nh·∫≠t k√Ω n√†o</h3>
            <p className="text-muted-foreground mb-4">
              {searchTerm || filterYear !== "all" || filterMonth !== "all" || filterMood !== "all"
                ? "Kh√¥ng t√¨m th·∫•y nh·∫≠t k√Ω ph√π h·ª£p v·ªõi b·ªô l·ªçc"
                : "H√£y b·∫Øt ƒë·∫ßu vi·∫øt nh·∫≠t k√Ω h·ªçc t·∫≠p ƒë·∫ßu ti√™n c·ªßa b·∫°n"}
            </p>
            {!searchTerm && filterYear === "all" && filterMonth === "all" && filterMood === "all" && (
              <Button onClick={() => setIsDialogOpen(true)}>
                <Plus className="w-4 h-4 mr-2" />
                Vi·∫øt nh·∫≠t k√Ω ƒë·∫ßu ti√™n
              </Button>
            )}
          </CardContent>
        </Card>
      )}
    </div>
  )
}
